// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "scid_api_tokens",
    checkConstraints: {},
    foreignKeys: {
      scid_api_tokens_user_id_user_id_fk: {
        name: "scid_api_tokens_user_id_user_id_fk",
        columns: ["user_id"],
        referencedTable: "user",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      scid_api_tokens_scid_token_unique: {
        name: "scid_api_tokens_scid_token_unique",
        columns: ["scid_token"],
      },
      scid_api_tokens_session_token_unique: {
        name: "scid_api_tokens_session_token_unique",
        columns: ["session_token"],
      },
    },
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "scid_token",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "scid_token_iv",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "session_token",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "session_token_expiry",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: "(now() + '30:00:00'::interval)",
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "user" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "session",
    checkConstraints: {},
    foreignKeys: {
      session_user_id_user_id_fk: {
        name: "session_user_id_user_id_fk",
        columns: ["user_id"],
        referencedTable: "user",
        referencedColumns: ["id"],
        onDelete: "NO ACTION",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "expires_at",
        type: "datetime",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "ip_country",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "user" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "supercell_id_profile",
    checkConstraints: {},
    foreignKeys: {
      supercell_id_profile_user_id_user_id_fk: {
        name: "supercell_id_profile_user_id_user_id_fk",
        columns: ["user_id"],
        referencedTable: "user",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: [],
    uniqueConstraints: {
      supercell_id_profile_scid_unique: {
        name: "supercell_id_profile_scid_unique",
        columns: ["scid"],
      },
    },
    columns: [
      {
        name: "avatar_image",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "qr_code_url",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "scid",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "universal_link",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "user" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      user_email_unique: { name: "user_email_unique", columns: ["email"] },
      user_session_token_unique: {
        name: "user_session_token_unique",
        columns: ["session_token"],
      },
      user_supercell_id_unique: {
        name: "user_supercell_id_unique",
        columns: ["supercell_id"],
      },
      user_username_unique: {
        name: "user_username_unique",
        columns: ["username"],
      },
    },
    columns: [
      {
        name: "created_at",
        type: "timestamp without time zone",
        notNull: true,
        unique: false,
        defaultValue: "now()",
        comment: "",
      },
      {
        name: "email",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "hashed_password",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "saved_club_tags",
        type: "varchar[]",
        notNull: true,
        unique: false,
        defaultValue: "ARRAY[]::text[]",
        comment: "",
      },
      {
        name: "saved_tags",
        type: "varchar[]",
        notNull: true,
        unique: false,
        defaultValue: "ARRAY[]::text[]",
        comment: "",
      },
      {
        name: "session_token",
        type: "string",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "supercell_id",
        type: "string",
        notNull: false,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "timestamp without time zone",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "username",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type ScidApiTokens = InferredTypes["scid_api_tokens"];
export type ScidApiTokensRecord = ScidApiTokens & XataRecord;

export type Session = InferredTypes["session"];
export type SessionRecord = Session & XataRecord;

export type SupercellIdProfile = InferredTypes["supercell_id_profile"];
export type SupercellIdProfileRecord = SupercellIdProfile & XataRecord;

export type User = InferredTypes["user"];
export type UserRecord = User & XataRecord;

export type DatabaseSchema = {
  scid_api_tokens: ScidApiTokensRecord;
  session: SessionRecord;
  supercell_id_profile: SupercellIdProfileRecord;
  user: UserRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://technorav3nn-s-workspace-cacfvr.us-east-1.xata.sh/db/brawltrack",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
