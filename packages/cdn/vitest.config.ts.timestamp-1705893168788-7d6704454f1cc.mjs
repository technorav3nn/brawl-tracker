// vitest.config.ts
import { mergeConfig, defineConfig as defineConfig2 } from "file:///Users/colin/Documents/Projects/brawl-tracker-pr-1/node_modules/vitest/dist/config.js";

// ../../vitest.config.ts
import process from "node:process";
import { defineConfig } from "file:///Users/colin/Documents/Projects/brawl-tracker-pr-1/node_modules/vitest/dist/config.js";
import GithubActionsReporter from "file:///Users/colin/Documents/Projects/brawl-tracker-pr-1/node_modules/vitest-github-actions-reporter/dist/index.js";
var configShared = defineConfig({
  test: {
    reporters: process.env.GITHUB_ACTIONS ? ["default", new GithubActionsReporter()] : "default",
    exclude: ["**/node_modules", "**/dist", ".idea", ".git", ".cache", ".yarn"],
    passWithNoTests: true,
    coverage: {
      enabled: true,
      reporter: ["text", "json-summary", "json", "html"],
      exclude: [
        // All ts files that only contain types, due to ALL
        "**/*.{interface,type,d}.ts",
        "**/{interfaces,types}/*.ts",
        // All index files that *should* only contain exports from other files
        "**/index.{js,ts}",
        // All exports files that make subpackages available as submodules
        "**/exports/*.{js,ts}",
        // Config files
        "**/**{config}.{js,ts}"
      ]
    }
  }
});
var vitest_config_default = defineConfig(configShared);

// vitest.config.ts
var vitest_config_default2 = mergeConfig(configShared, defineConfig2({}));
export {
  vitest_config_default2 as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZXN0LmNvbmZpZy50cyIsICIuLi8uLi92aXRlc3QuY29uZmlnLnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2NvbGluL0RvY3VtZW50cy9Qcm9qZWN0cy9icmF3bC10cmFja2VyLXByLTEvcGFja2FnZXMvY2RuXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvY29saW4vRG9jdW1lbnRzL1Byb2plY3RzL2JyYXdsLXRyYWNrZXItcHItMS9wYWNrYWdlcy9jZG4vdml0ZXN0LmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vVXNlcnMvY29saW4vRG9jdW1lbnRzL1Byb2plY3RzL2JyYXdsLXRyYWNrZXItcHItMS9wYWNrYWdlcy9jZG4vdml0ZXN0LmNvbmZpZy50c1wiO2ltcG9ydCB7IG1lcmdlQ29uZmlnLCBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZXN0L2NvbmZpZ1wiO1xuaW1wb3J0IHsgY29uZmlnU2hhcmVkIH0gZnJvbSBcIi4uLy4uL3ZpdGVzdC5jb25maWdcIjtcblxuZXhwb3J0IGRlZmF1bHQgbWVyZ2VDb25maWcoY29uZmlnU2hhcmVkLCBkZWZpbmVDb25maWcoe30pKTtcbiIsICJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2NvbGluL0RvY3VtZW50cy9Qcm9qZWN0cy9icmF3bC10cmFja2VyLXByLTFcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIi9Vc2Vycy9jb2xpbi9Eb2N1bWVudHMvUHJvamVjdHMvYnJhd2wtdHJhY2tlci1wci0xL3ZpdGVzdC5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL2NvbGluL0RvY3VtZW50cy9Qcm9qZWN0cy9icmF3bC10cmFja2VyLXByLTEvdml0ZXN0LmNvbmZpZy50c1wiO2ltcG9ydCBwcm9jZXNzIGZyb20gXCJub2RlOnByb2Nlc3NcIjtcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlc3QvY29uZmlnXCI7XG5pbXBvcnQgR2l0aHViQWN0aW9uc1JlcG9ydGVyIGZyb20gXCJ2aXRlc3QtZ2l0aHViLWFjdGlvbnMtcmVwb3J0ZXJcIjtcblxuZXhwb3J0IGNvbnN0IGNvbmZpZ1NoYXJlZCA9IGRlZmluZUNvbmZpZyh7XG5cdHRlc3Q6IHtcblx0XHRyZXBvcnRlcnM6IHByb2Nlc3MuZW52LkdJVEhVQl9BQ1RJT05TID8gW1wiZGVmYXVsdFwiLCBuZXcgR2l0aHViQWN0aW9uc1JlcG9ydGVyKCldIDogXCJkZWZhdWx0XCIsXG5cdFx0ZXhjbHVkZTogW1wiKiovbm9kZV9tb2R1bGVzXCIsIFwiKiovZGlzdFwiLCBcIi5pZGVhXCIsIFwiLmdpdFwiLCBcIi5jYWNoZVwiLCBcIi55YXJuXCJdLFxuXHRcdHBhc3NXaXRoTm9UZXN0czogdHJ1ZSxcblx0XHRjb3ZlcmFnZToge1xuXHRcdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRcdHJlcG9ydGVyOiBbXCJ0ZXh0XCIsIFwianNvbi1zdW1tYXJ5XCIsIFwianNvblwiLCBcImh0bWxcIl0sXG5cdFx0XHRleGNsdWRlOiBbXG5cdFx0XHRcdC8vIEFsbCB0cyBmaWxlcyB0aGF0IG9ubHkgY29udGFpbiB0eXBlcywgZHVlIHRvIEFMTFxuXHRcdFx0XHRcIioqLyoue2ludGVyZmFjZSx0eXBlLGR9LnRzXCIsXG5cdFx0XHRcdFwiKiove2ludGVyZmFjZXMsdHlwZXN9LyoudHNcIixcblx0XHRcdFx0Ly8gQWxsIGluZGV4IGZpbGVzIHRoYXQgKnNob3VsZCogb25seSBjb250YWluIGV4cG9ydHMgZnJvbSBvdGhlciBmaWxlc1xuXHRcdFx0XHRcIioqL2luZGV4Lntqcyx0c31cIixcblx0XHRcdFx0Ly8gQWxsIGV4cG9ydHMgZmlsZXMgdGhhdCBtYWtlIHN1YnBhY2thZ2VzIGF2YWlsYWJsZSBhcyBzdWJtb2R1bGVzXG5cdFx0XHRcdFwiKiovZXhwb3J0cy8qLntqcyx0c31cIixcblx0XHRcdFx0Ly8gQ29uZmlnIGZpbGVzXG5cdFx0XHRcdFwiKiovKip7Y29uZmlnfS57anMsdHN9XCIsXG5cdFx0XHRdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKGNvbmZpZ1NoYXJlZCk7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQW1YLFNBQVMsYUFBYSxnQkFBQUEscUJBQW9COzs7QUNBakYsT0FBTyxhQUFhO0FBQ2hXLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sMkJBQTJCO0FBRTNCLElBQU0sZUFBZSxhQUFhO0FBQUEsRUFDeEMsTUFBTTtBQUFBLElBQ0wsV0FBVyxRQUFRLElBQUksaUJBQWlCLENBQUMsV0FBVyxJQUFJLHNCQUFzQixDQUFDLElBQUk7QUFBQSxJQUNuRixTQUFTLENBQUMsbUJBQW1CLFdBQVcsU0FBUyxRQUFRLFVBQVUsT0FBTztBQUFBLElBQzFFLGlCQUFpQjtBQUFBLElBQ2pCLFVBQVU7QUFBQSxNQUNULFNBQVM7QUFBQSxNQUNULFVBQVUsQ0FBQyxRQUFRLGdCQUFnQixRQUFRLE1BQU07QUFBQSxNQUNqRCxTQUFTO0FBQUE7QUFBQSxRQUVSO0FBQUEsUUFDQTtBQUFBO0FBQUEsUUFFQTtBQUFBO0FBQUEsUUFFQTtBQUFBO0FBQUEsUUFFQTtBQUFBLE1BQ0Q7QUFBQSxJQUNEO0FBQUEsRUFDRDtBQUNELENBQUM7QUFFRCxJQUFPLHdCQUFRLGFBQWEsWUFBWTs7O0FEeEJ4QyxJQUFPQyx5QkFBUSxZQUFZLGNBQWNDLGNBQWEsQ0FBQyxDQUFDLENBQUM7IiwKICAibmFtZXMiOiBbImRlZmluZUNvbmZpZyIsICJ2aXRlc3RfY29uZmlnX2RlZmF1bHQiLCAiZGVmaW5lQ29uZmlnIl0KfQo=
